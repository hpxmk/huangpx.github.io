(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{365:function(t,e,n){"use strict";n.r(e);var r=n(44),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"基于-element-ui-左侧树右侧数组穿梭框"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基于-element-ui-左侧树右侧数组穿梭框"}},[t._v("#")]),t._v(" 基于 element-ui 左侧树右侧数组穿梭框")]),t._v(" "),n("h3",{attrs:{id:"使用方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),n("p",[t._v('import proElement from "pro-element";\nVue.use(proElement);')]),t._v(" "),n("h3",{attrs:{id:"基础用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础用法"}},[t._v("#")]),t._v(" 基础用法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n    <div>\n       <pro-asyn-tree-transfer\n        ref="tree"\n        :props="defaultProps"\n        :data="datas"\n     ></pro-asyn-tree-transfer>\n    </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      defaultProps: {\n        label: "label",\n        children: "children",\n      },\n      datas: [\n        {\n          id: 1,\n          parentId: 0,\n          label: "一级 1",\n        },\n      ]\n    };\n  }\n};\n<\/script>\n')])])]),n("h3",{attrs:{id:"内置接口懒加载用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置接口懒加载用法"}},[t._v("#")]),t._v(" 内置接口懒加载用法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n    <div>\n       <pro-asyn-tree-transfer\n        ref="tree"\n        :props="defaultProps"\n        lazy\n        :request="request"\n     ></pro-asyn-tree-transfer>\n    </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      defaultProps: {\n        label: "label",\n        children: "children",\n      }\n    };\n  },\n  methods: {\n    request: {\n        nodeId: "node",\n        url: "http://localhost:80/getTree",\n        res: {\n          userId: 1,\n        },\n        req: "data",\n    },\n  },\n};\n<\/script>\n')])])]),n("h3",{attrs:{id:"外置懒加载用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#外置懒加载用法"}},[t._v("#")]),t._v(" 外置懒加载用法")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n    <div>\n       <pro-asyn-tree-transfer\n        ref="tree"\n        :props="defaultProps"\n        lazy\n        :httpRequest="httpRequest"\n     ></pro-asyn-tree-transfer>\n    </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      defaultProps: {\n        label: "label",\n        children: "children",\n      },\n       httpRequest: function(node, resolve) {\n        return new Promise((res, rej) => {\n          if (node.level == 0) {\n            axios.get("http://localhost:80/getTree").then((resp) => {\n              let _data = resp.data.data;\n\n              res(_data);\n            });\n          } else {\n            axios.get("http://localhost:80/getTree").then((resp) => {\n              let _data = resp.data.data;\n\n              res(_data);\n            });\n          }\n        });\n      },\n    };\n  },\n  methods: {\n\n  },\n};\n<\/script>\n')])])]),n("h3",{attrs:{id:"默认勾选节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认勾选节点"}},[t._v("#")]),t._v(" 默认勾选节点")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n    <div>\n       <pro-asyn-tree-transfer\n        ref="tree"\n        :props="defaultProps"\n        :data="datas"\n        :defaultCheckedKeys="[2]"\n     ></pro-asyn-tree-transfer>\n    </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      defaultProps: {\n        label: "label",\n        children: "children",\n      },\n      datas: [\n        {\n          id: 1,\n          parentId: 0,\n          label: "一级 1",\n        },\n      ]\n    };\n  }\n};\n<\/script>\n')])])]),n("h3",{attrs:{id:"自定义渲染节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义渲染节点"}},[t._v("#")]),t._v(" 自定义渲染节点")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n    <div>\n       <pro-asyn-tree-transfer\n        ref="tree"\n        :props="defaultProps"\n        :data="datas"\n        :defaultCheckedKeys="[2]"\n        :renderContent="renderContent"\n     ></pro-asyn-tree-transfer>\n    </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      defaultProps: {\n        label: "label",\n        children: "children",\n      },\n      datas: [\n        {\n          id: 1,\n          parentId: 0,\n          label: "一级 1",\n        },\n      ]\n    };\n  },\n  methods:{\n      renderContent(h, { node, data, store }) {\n      return (\n        <span class="custom-tree-node">\n          <span>{node.label}</span>\n          <span>\n            <el-button\n              size="mini"\n              type="text"\n              on-click={() => this.append(data)}\n            >\n              Append\n            </el-button>\n            <el-button\n              size="mini"\n              type="text"\n              on-click={() => this.remove(node, data)}\n            >\n              Delete\n            </el-button>\n          </span>\n        </span>\n      );\n    },\n  }\n};\n<\/script>\n\n')])])]),n("h3",{attrs:{id:"展示内置过滤条件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#展示内置过滤条件"}},[t._v("#")]),t._v(" 展示内置过滤条件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n    <div>\n       <pro-asyn-tree-transfer\n        ref="tree"\n        :props="defaultProps"\n        :data="datas"\n         :filterables="filterables"\n     ></pro-asyn-tree-transfer>\n    </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      filterables: [true, false],\n      defaultProps: {\n        label: "label",\n        children: "children",\n      },\n      datas: [\n        {\n          id: 1,\n          parentId: 0,\n          label: "一级 1",\n        },\n      ]\n    };\n  },\n  methods:{\n\n    },\n};\n<\/script>\n\n')])])]),n("h3",{attrs:{id:"外部过滤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#外部过滤"}},[t._v("#")]),t._v(" 外部过滤")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n    <div>\n    <el-form :inline="true" :model="formInline" class="demo-form-inline">\n        <el-form-item>\n          <el-input v-model="filterText" placeholder="审批人"></el-input>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type="primary" @click="search">查询</el-button>\n        </el-form-item>\n      </el-form>\n       <pro-asyn-tree-transfer\n        ref="tree"\n        :props="defaultProps"\n        :data="datas"\n        outFilter\n        :filterNode="filterNode"\n     ></pro-asyn-tree-transfer>\n    </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n\n      defaultProps: {\n        label: "label",\n        children: "children",\n      },\n      datas: [\n        {\n          id: 1,\n          parentId: 0,\n          label: "一级 1",\n        },\n      ],\n       formInline: {\n        user: "",\n        region: "",\n      },\n      filterText: "",\n    };\n  },\n    watch: {\n    filterText(val) {\n        this.$refs.tree.filter(val);\n    }\n\n  },\n  methods:{\n      filterNode(value, data) {\n        if (!value) return true;\n        return data.label.indexOf(value) !== -1;\n      },\n    },\n};\n<\/script>\n')])])]),n("h3",{attrs:{id:"内置懒加载外部查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置懒加载外部查询"}},[t._v("#")]),t._v(" 内置懒加载外部查询")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n    <div>\n    <el-form :inline="true" :model="formInline" class="demo-form-inline">\n        <el-form-item>\n          <el-input v-model="filterText" placeholder="审批人"></el-input>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type="primary" @click="search">查询</el-button>\n        </el-form-item>\n      </el-form>\n       <pro-asyn-tree-transfer\n        ref="tree"\n        :props="defaultProps"\n        :data="datas"\n        outFilter\n        :filterNode="filterNode"\n        :request="request"\n     ></pro-asyn-tree-transfer>\n    </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n\n      defaultProps: {\n        label: "label",\n        children: "children",\n      },\n      datas: [\n        {\n          id: 1,\n          parentId: 0,\n          label: "一级 1",\n        },\n      ],\n       formInline: {\n        user: "",\n        region: "",\n      },\n      filterText: "",\n    };\n  },\n  watch: {},\n  methods:{\n    search() {\n      this.request.res={\n        hhh:12\n      }\n      this.$refs.tree.roladData();\n    },\n\n    }\n};\n<\/script>\n')])])]),n("h3",{attrs:{id:"外置懒加载外部查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#外置懒加载外部查询"}},[t._v("#")]),t._v(" 外置懒加载外部查询")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n    <div>\n    <el-form :inline="true" :model="formInline" class="demo-form-inline">\n        <el-form-item>\n          <el-input v-model="filterText" placeholder="审批人"></el-input>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type="primary" @click="search">查询</el-button>\n        </el-form-item>\n      </el-form>\n       <pro-asyn-tree-transfer\n        ref="tree"\n        :props="defaultProps"\n        outFilter\n        :filterNode="filterNode"\n         :httpRequest="httpRequest"\n     ></pro-asyn-tree-transfer>\n    </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n\n      defaultProps: {\n        label: "label",\n        children: "children",\n      },\n       formInline: {\n        user: "",\n        region: "",\n      },\n      httpRequest: function(node, resolve) {\n        return new Promise((res, rej) => {\n          if (node.level == 0) {\n            axios.get("http://localhost:80/getTree",{\n              params:{hh:1}\n            }).then((resp) => {\n              let _data = resp.data.data;\n\n              res(_data);\n            });\n          } else {\n            axios.get("http://localhost:80/getTree").then((resp) => {\n              let _data = resp.data.data;\n\n              res(_data);\n            });\n          }\n        });\n      },\n    };\n  },\n  watch: {},\n  methods:{\n    search() {\n      this.$refs.tree.roladData();\n    },\n\n    }\n};\n<\/script>\n')])])]),n("h3",{attrs:{id:"数据格式-attributes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据格式-attributes"}},[t._v("#")]),t._v(" 数据格式 Attributes")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("参数")]),t._v(" "),n("th",[t._v("说明")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("可选值")]),t._v(" "),n("th",[t._v("默认值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("data")]),t._v(" "),n("td",[t._v("展示数据")]),t._v(" "),n("td",[t._v("Array")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("-")])]),t._v(" "),n("tr",[n("td",[t._v("props")]),t._v(" "),n("td",[t._v("配置选项，具体看下表")]),t._v(" "),n("td",[t._v("Object")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("-")])]),t._v(" "),n("tr",[n("td",[t._v("defaultCheckedKeys")]),t._v(" "),n("td",[t._v("默认勾选的节点的 key 的数组")]),t._v(" "),n("td",[t._v("Array")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("-")])]),t._v(" "),n("tr",[n("td",[t._v("renderContent")]),t._v(" "),n("td",[t._v("树节点的内容区的渲染 Function")]),t._v(" "),n("td",[t._v("Function(h, { node, data, store }")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("-")])]),t._v(" "),n("tr",[n("td",[t._v("lazy")]),t._v(" "),n("td",[t._v("开启懒加载")]),t._v(" "),n("td",[t._v("Boolean")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("false")])]),t._v(" "),n("tr",[n("td",[t._v("request")]),t._v(" "),n("td",[t._v("接口请求对象,配置选项，具体看下表 (lazy=true)")]),t._v(" "),n("td",[t._v("Object")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("-")])]),t._v(" "),n("tr",[n("td",[t._v("filterables")]),t._v(" "),n("td",[t._v("显示内置过滤表单")]),t._v(" "),n("td",[t._v("Array")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("[false,false]")])]),t._v(" "),n("tr",[n("td",[t._v("placeholder")]),t._v(" "),n("td",[t._v("对树节点进行筛选的 placeholder 属性")]),t._v(" "),n("td",[t._v("Sring")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("outFilter")]),t._v(" "),n("td",[t._v("对树节点进行执行外部过滤")]),t._v(" "),n("td",[t._v("Boolean")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("false")])])])]),t._v(" "),n("h3",{attrs:{id:"props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" props")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("参数")]),t._v(" "),n("th",[t._v("说明")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("可选值")]),t._v(" "),n("th",[t._v("默认值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("label")]),t._v(" "),n("td",[t._v("指定节点标签为节点对象的某个属性值")]),t._v(" "),n("td",[t._v("String")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("key")]),t._v(" "),n("td",[t._v("指定节点 id 为节点对象的某个属性值")]),t._v(" "),n("td",[t._v("String")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("parentKey")]),t._v(" "),n("td",[t._v("指定节点父 id 为节点对象的某个属性值")]),t._v(" "),n("td",[t._v("String")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("disabled")]),t._v(" "),n("td",[t._v("指定节点选择框是否禁用为节点对象的某个属性值")]),t._v(" "),n("td",[t._v("Boolean")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("children")]),t._v(" "),n("td",[t._v("指定子树为节点对象的某个属性值")]),t._v(" "),n("td",[t._v("Strng")]),t._v(" "),n("td"),t._v(" "),n("td")])])]),t._v(" "),n("h3",{attrs:{id:"request-仅支持-get-请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#request-仅支持-get-请求"}},[t._v("#")]),t._v(" request （仅支持 get 请求）")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("参数")]),t._v(" "),n("th",[t._v("说明")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("可选值")]),t._v(" "),n("th",[t._v("默认值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("nodeId")]),t._v(" "),n("td",[t._v("接口按需加载子节点传值父节点字段名")]),t._v(" "),n("td",[t._v("Object")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("url")]),t._v(" "),n("td",[t._v("接口名")]),t._v(" "),n("td",[t._v("String")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("res")]),t._v(" "),n("td",[t._v("接口请求参数")]),t._v(" "),n("td",[t._v("Object")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("req")]),t._v(" "),n("td",[t._v("接口返回参数解析")]),t._v(" "),n("td",[t._v("Strng")]),t._v(" "),n("td"),t._v(" "),n("td")])])]),t._v(" "),n("h3",{attrs:{id:"方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("参数")]),t._v(" "),n("th",[t._v("说明")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("可选值")]),t._v(" "),n("th",[t._v("默认值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("roladData")]),t._v(" "),n("td",[t._v("重新加载节点")]),t._v(" "),n("td",[t._v("Function")]),t._v(" "),n("td"),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("filterNode")]),t._v(" "),n("td",[t._v("对树节点进行执行外部过滤( outFilter=true)")]),t._v(" "),n("td",[t._v("Function(value, data)")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("httpRequest")]),t._v(" "),n("td",[t._v("自定义接口请求 (lazy=true)")]),t._v(" "),n("td",[t._v("Function(node, resolve)")]),t._v(" "),n("td",[t._v("-")]),t._v(" "),n("td",[t._v("-")])])])]),t._v(" "),n("h3",{attrs:{id:"events"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("参数")]),t._v(" "),n("th",[t._v("说明")]),t._v(" "),n("th",[t._v("类型")]),t._v(" "),n("th",[t._v("可选值")]),t._v(" "),n("th",[t._v("默认值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("checkedList")]),t._v(" "),n("td",[t._v("节点被穿梭时的回调")]),t._v(" "),n("td",[t._v("Function")]),t._v(" "),n("td"),t._v(" "),n("td")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);